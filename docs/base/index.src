<h1>Basic Engine Documentation</h1>

<div class="source_info">
    <p>This page (and the rest of the site) is powered by the SourceJS engine. All documentation comes built in in every SourceJS instance.</p>

    <p>The <a href="http://sourcejs.com">Sourcejs.com</a> client-side source code is stored in our <a href="https://github.com/sourcejs/Sourcejs.com">github repo</a>.</p>
</div>

<section class="source_section" id="install">
    <h2>Quick Start</h2>

    <p>Before you start, please make sure that you have <a href="http://git-scm.com/downloads">Git</a> and <a href="http://nodejs.org/download/">Node.js</a> on your system, then install next NPM packages:</p>

    <code class="src-html source_visible">
        $ npm install -g yo grunt-cli generator-sourcejs
    </code>

    <p>After that, you'll have special <code>yo sourcejs</code> generator available for init and bootstrapping new items:</p>

    <code class="src-html source_visible">
        $ cd sourcejs-folder
        $ yo sourcejs
    </code>

    <p>If you're running Windows, and have some issues with <a href="https://github.com/tmpvar/jsdom">jsdom</a> dependencies compilation, check this <a href="https://github.com/sourcejs/Source/issues/23">topic</a>.</p>

    <h3>Run Commands</h3>

    <p>Yeoman generator will suggest you starting SourceJS right after initialization, besides that, here's a run command for main app:</p>

    <code class="src-html source_visible">
        $ node app
    </code>

    <p>For first dev build Grunt will run automatically right after Yeoman init, here's a list of <a href="/docs/grunt">all Grunt tasks available</a>.</p>
</section>

<section class="source_section" id="first-spec">
    <h2>Starting your first Spec</h2>

    <p>Specs are the main content files in SourceJS engine, in them you define all your description of chosen components and it's code examples. Originally we use <code>*.src</code> file templates, but you're free to configure your own with <a href="https://github.com/sourcejs/sourcejs-jade">Jade</a> for example.</p>

    <div class="source_note">
        <p>After initialization, you get <code>sourcejs/user</code> folder, which is the place for all your custom content. All new Specs and configuration of main engine must be done there.</p>
    </div>

    <h3>Spec Starting Template</h3>

    <p>The starting template for new <strong>Spec</strong> pages can be found in <a href="/docs/starting">/docs/starting</a>. Copy the contents to a new folder in <code>source/user/specs</code> and you'll be ready to write a new spec.</p>

    <a href="/docs/spec" class="source_a_hl">Read more about Spec pages here.</a>

    <h3>Server-side Templating Engines</h3>

    <p>As we mentioned before, it's easy to use other server-side/compiled templating engines like Jade, you only need to create a simple SourceJS middleware (<a href="https://github.com/sourcejs/sourcejs-jade">example</a>) or process your sources with Grunt/Gulp. <code>*.src</code> files, that we use by default are processed with <a href="https://github.com/tj/ejs">EJS</a>, so you're free to use custom EJS features in any spec page - like includes or even plain JavaScript.</p>

    <p>We treat Spec files as an interface, you can construct your Spec page in any ways, following only few simple rules - each Spec must have <code>info.json</code> file aside, with meta information for the Engine and output spec page must have SourceJS compliant markup. Special markup contains only few vital classes like <code>.source_section</code>, <code>.source_example</code> and the rest is plain, semantic HTML.</p>

    <h3>Client-side Templating Eninges</h3>

    <p>For client-side templating you don't need any magic, just link Mustache or any other technology to your page and use it whenever you want. Remember, SourceJS Specs are a simple static pages, that are then enchanted with client-side scripts and internal APIs.</p>

    <p>After 0.4 release we will put quite a lot of effort, creating example with popular technologies for fast scaffolding your SourceJS library.</p>

</section>

<section class="source_section" id="examples">
    <h2>Examples</h2>

    <p>Main project website <a href="http://sourcejs.com">Sourcejs.com</a> is based on SourceJS engine, as well as all documentation that you're surfing right now. To see more complex example of Spec page, check out <a href="/docs/spec/">this section</a>.</p>

    <p>You can inspect <a href="https://github.com/sourcejs/Sourcejs.com">Sourcejs.com source code</a>, that demonstrates basic <code>source/user</code> folder contents.</p>

    <p>More examples and screencasts coming soon, but for now, you can check this <a href="https://www.youtube.com/watch?v=ukFeZnJjrLs">SourceJS video presentation</a> (RU with EN subtitles).</p>

</section>

<section class="source_section">
    <h2>File Structure</h2>

    <p>Engine architecture is based on <strong>two enviroments:</strong></p>

    <ul>
        <li><strong>assets</strong> - JavaScript front-end</li>
        <li><strong>core</strong> - NodeJS back-end</li>
    </ul>
</section>

<section class="source_section"><markdown>

## Configuration

All default options for `assets` (front-end) and `core` (back-end) are located in `sourcejs/options.js`. To overwrite basic options, user your own `sourcejs/user/options.js` file, from your SourceJS instance home directory.

Options examples are located in source files.

### Page level overrides

All client-side options can be overridden from within any page using the following approach:

<code class="src-html source_visible">
    <script>
        define('sourceModules/inlineOptions', {
            modulesOptions : {
                globalNav : {
                    pageLimit: 6
                }
            }
        })
    </script>
</code>

### Patching core assets

<div class="source_warn">
    Patching is not recommended approach, it's supposed to be used only for edge cases, before your changes will be merged in SourceJS core.
</div>

To extend core Front-end assets, that are stored in `sourcejs/assets` we provide a patching feature.

To use your own version of any core assets, all you need is to place your new files to `sourcejs/user/core/assets` folder. Custom routing will handle the rest:

<code class="src-html source_visible">
sourcejs/assets/js/modules/ntf.js < sourcejs/user/source/assets/js/modules/ntf.js
sourcejs/assets/js/modules/css.js < sourcejs/user/source/assets/js/modules/css.js
</code>

In this example, on request for `localhost:8080/source/assets/js/modules/ntf.js` engine will provide version from `sourcejs/user/source/assets` folder, instead of version from core `sourcejs/assets`.
</markdown></section>

<section class="source_section">
    <h2>Plugins</h2>

    <p>All modules in SourceJS core are configurable and you can add as many plugins as you want. All official public plugins are available in <a href="https://github.com/sourcejs">SourceJS home on Github</a>.</p>

    <p>Plugins could have <code>core</code> and <code>assets</code> parts to improve both back-end and front-end. To install any of official plugin, just use <code>npm install</code> (note that some of them needs additional dependencies like <a href="http://www.mongodb.org/">MongoDB</a> or <a href="http://couchdb.apache.org/">CouchDB</a>).</p>

    <p>Here's few official plugins:</p>

    <ul>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-spec-status">sourcejs-spec-status</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-crowd-voice">sourcejs-crowd-voice</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-jade">sourcejs-jade</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-comments">sourcejs-comments</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-specs-linting">sourcejs-specs-linting</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-spec-dependencies">sourcejs-spec-dependencies</a></li>
        <li><a class="source_a_hl" href="https://github.com/sourcejs/sourcejs-smiles">sourcejs-smiles</a></li>
    </ul>

</section>

<section class="source_section">
    <h2>Contact us</h2>

    <p>Leave your questions and feedback as <a href="https://github.com/sourcejs/Source/issues">issues</a> on Github.</p>

</section>